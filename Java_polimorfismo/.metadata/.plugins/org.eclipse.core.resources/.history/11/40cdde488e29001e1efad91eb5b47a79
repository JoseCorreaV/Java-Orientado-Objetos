package com.herencias_interfaces.test;
import com.herencias_interfaces.Modelo.*;

public class testArrayRefents {
	
	
	/** Type cast
	 * 
	 * int numero = 3;
       double valor = numero; //cast implícito  
       
       CuentaCorriente cc1 = new CuentaCorriente(22, 33);
       Cuenta cuenta = cc1; //cast implícito
       
       int numero = 3;
       double valor = (double) numero; //cast explícito
       CuentaCorriente cc1 = new CuentaCorriente(22, 33);
       Cuenta Cuenta = (Cuenta) cc1; //cast explícito mas desnecessário
       
       double valor = 3.56;
       int numero = (int) valor; //cast explícito es exigido por el compilador
       
	 * 
	 */

	public static void main(String[] args) {
		// crear 5 arrays de cuentas
				Object[] referencia = new Object[5];
				
				
		CuentaCorriente cc = new CuentaCorriente(23,44);

		
		referencia[1] = cc;
		
		Cliente cliente = new Cliente();
		referencia[4] = cliente;
		
		// ejemplo de type cast => (Cliente) => decirle a java Que obtenido es un cliente de la clase padre object
		Cliente obtenido = (Cliente) referencia[4];
		System.out.println(obtenido);
		
		
	  // creamos una cuenta de ahorro
		CuentaAhorro ca = new CuentaAhorro(20, 15);
		// le asignamos la cuentacorriente
		referencia[3] = ca;
		
		referencia[0] = new CuentaCorriente(11,99);
		System.out.println(referencia[0]);
		

		System.out.println("\n CAST");
		//           CAST => obligar al array cuentas agregar en el indice 1 una cuenta Corriente
		// este CAST solo aplica para la cuentaCorriente 
		CuentaCorriente cuentaC = (CuentaCorriente) referencia[1];
		System.out.println(cuentaC);
		
		
		
		System.out.println("\n");
		int sizeArray = referencia.length;
		// recorrer e imprimir un array
				for(int i = 0; i< sizeArray; i++) {
					System.out.println("Array "+i+": "+ referencia[i]);
				}
				
				
				
				
				
				
				
				
				/*
				// el mismo resultado => crea e imprime la cuenta
				System.out.println(cc);
				System.out.println(cuentas[1]); */

	}

}
