package com.herencias_interfaces.test;

import java.util.ArrayList;
import com.herencias_interfaces.Modelo.*;

public class testArrayList {

	public static void main(String[] args) {
		/** Array VS ArrayList
		 * 
		 * Array
		 * - .lenght => Cantidad de espacios en el array (ya sean vacios o no)
		 * 
		 * Arraylist
		 * - .size => cantidad de elementos que existen en el array
		 * 
		 */
		
		
		// el operador diamante <> en el arraylist sirve para forzar a aceptar el tipo de objeto.
		// ventajas: permite identificar automaticamente los tipos de datos no permitidos 
		ArrayList<Cuenta> lista = new ArrayList<>();
		// se crea la REFERENCIA (cc,cc2) con el objeto(Cuenta -  CuentaCorriente)
		Cuenta cc = new CuentaCorriente(11,22);
		Cuenta cc2 = new CuentaCorriente(10,24);
		Cuenta cc3 = new CuentaCorriente(11,22);
		
		lista.add(cc);
		lista.add(cc2);

		
		Cuenta obtenerCuenta  = lista.get(0);
		System.out.println(obtenerCuenta);
		
		
		for(int i = 0; i< lista.size(); i++) {
			System.out.println("Array "+i+": "+ lista.get(i));
		}
		
		//Para cuando tenemos un arrayList de un objeto
		// por cada cuenta (: = en) la lista
		for(Cuenta cuenta :  lista) {
			System.out.println(cuenta);
		}
		
		// si una lista contiene referencias de x objeto => contains es de tipo boolean
		lista.contains(cc);
		if(lista.contains(cc3)) {
			System.out.println("Si tienen elementos");
		}
		
	}
}
